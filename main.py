# main.py
import discord
from discord.ext import tasks, commands
from discord.ui import View, Button, Select, Modal, InputText
from datetime import datetime, timezone, timedelta
import config, database, pandascore_api

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ---
intents = discord.Intents.default()
bot = discord.Bot(intents=intents)
GAMES_TO_TRACK = ["valorant", "csgo", "lol", "dota2"]
GAME_EMBED_CONFIG = { "valorant": {"name": "Valorant", "color": 0xFD4556}, "csgo": {"name": "CS2", "color": 0xFFA500}, "lol": {"name": "League of Legends", "color": 0x00BFFF}, "dota2": {"name": "Dota 2", "color": 0xFF0000}}

def create_schedule_embed(game_slug: str, time_period: str):
    now = datetime.now(timezone.utc); start_date, end_date, period_str = None, None, ""
    if time_period == "today": start_date = now.replace(hour=0, minute=0, second=0, microsecond=0); end_date = start_date + timedelta(days=1); period_str = "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
    elif time_period == "tomorrow": start_date = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0); end_date = start_date + timedelta(days=1); period_str = "‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ"
    elif time_period == "this_week": start_date = now.replace(hour=0, minute=0, second=0, microsecond=0); days_until_sunday = 6 - start_date.weekday(); end_date = (start_date + timedelta(days=days_until_sunday)).replace(hour=23, minute=59, second=59); period_str = "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ"
    else: return discord.Embed(title="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", description="‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    matches = database.get_matches_for_day(game_slug, start_date.isoformat(), end_date.isoformat())
    config = GAME_EMBED_CONFIG[game_slug]; embed = discord.Embed(title=f"üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏Ç‡πà‡∏á {config['name']} ({period_str})", color=config['color'], timestamp=datetime.now())
    matches_to_display = matches[:7]
    if not matches_to_display: embed.description = f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á{period_str}‡∏Ñ‡∏£‡∏±‡∏ö"
    else:
        for i, match in enumerate(matches_to_display):
            team1 = match['team1_name']; team2 = match['team2_name']; match_time_utc = datetime.fromisoformat(match['begin_at'].replace('Z', '+00:00'))
            time_str = f"{discord.utils.format_dt(match_time_utc, style='f')} ({discord.utils.format_dt(match_time_utc, style='R')})"
            stream_info = f"üì∫ [‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏ä‡∏°]({match['stream_url']})" if match['stream_url'] != 'N/A' else "üì∫ *‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå*"
            field_value = f"‚öîÔ∏è **{team1} vs {team2}**\n‚è∞ {time_str}\n{stream_info}"
            embed.add_field(name=f"üèÜ **{match['league_name']}**", value=field_value, inline=False)
            if i < len(matches_to_display) - 1: embed.add_field(name="", value="-"*50, inline=False)
    footer_text = f"‡πÅ‡∏™‡∏î‡∏á {len(matches_to_display)} ‡∏à‡∏≤‡∏Å {len(matches)} ‡πÅ‡∏°‡∏ï‡∏ä‡πå | ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Pandascore" if len(matches) > len(matches_to_display) else "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Pandascore"; embed.set_footer(text=footer_text)
    return embed

def create_player_schedule_embed(player_data, matches_data):
    player_name = player_data['name']
    embed = discord.Embed(
        title=f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏Ç‡∏≠‡∏á: {player_name}",
        description=f"‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡∏≠‡∏á **{player_name}**",
        color=0x7289DA
    )
    if player_data.get('image_url'):
        embed.set_thumbnail(url=player_data['image_url'])

    if not matches_data:
        embed.add_field(name="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", value=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Ç‡∏≠‡∏á **{player_name}** ‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö", inline=False)
    else:
        for match in matches_data:
            team1 = match['opponents'][0]['opponent']['name'] if len(match['opponents']) > 0 else "TBD"
            team2 = match['opponents'][1]['opponent']['name'] if len(match['opponents']) > 1 else "TBD"

            match_time_utc = datetime.fromisoformat(match['begin_at'].replace('Z', '+00:00'))
            time_str = f"{discord.utils.format_dt(match_time_utc, style='f')} ({discord.utils.format_dt(match_time_utc, style='R')})"
            
            stream_url = "N/A"
            if match.get('streams_list'):
                for stream in match['streams_list']:
                    if 'twitch' in stream.get('raw_url', ''): stream_url = stream['raw_url']; break
            stream_info = f"üì∫ [‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏ä‡∏°]({stream_url})" if stream_url != 'N/A' else "üì∫ *‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå*"

            field_value = f"‚öîÔ∏è **{team1} vs {team2}**\n‚è∞ {time_str}\n{stream_info}"
            embed.add_field(name=f"üèÜ **{match['league']['name']}**", value=field_value, inline=False)
            embed.add_field(name="", value="-"*50, inline=False)

    embed.set_footer(text=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {datetime.now().strftime('%d/%m/%Y')}")
    return embed

def create_team_schedule_embed(team_data, matches_data):
    team_name = team_data['name']
    embed = discord.Embed(
        title=f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°: {team_name}",
        description=f"‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏° **{team_name}**",
        color=0x99AAB5 # Discord Grayple
    )
    if team_data.get('image_url'):
        embed.set_thumbnail(url=team_data['image_url'])

    if not matches_data:
        embed.add_field(name="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", value=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏° **{team_name}** ‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö", inline=False)
    else:
        for match in matches_data:
            team1 = match['opponents'][0]['opponent']['name'] if len(match['opponents']) > 0 else "TBD"
            team2 = match['opponents'][1]['opponent']['name'] if len(match['opponents']) > 1 else "TBD"

            match_time_utc = datetime.fromisoformat(match['begin_at'].replace('Z', '+00:00'))
            time_str = f"{discord.utils.format_dt(match_time_utc, style='f')} ({discord.utils.format_dt(match_time_utc, style='R')})"
            stream_url = next((s['raw_url'] for s in match.get('streams_list', []) if 'twitch' in s.get('raw_url', '')), "N/A")
            stream_info = f"üì∫ [‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏ä‡∏°]({stream_url})" if stream_url != "N/A" else "üì∫ *‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå*"
            field_value = f"‚öîÔ∏è **{team1} vs {team2}**\n‚è∞ {time_str}\n{stream_info}"
            embed.add_field(name=f"üèÜ **{match['league']['name']}**", value=field_value, inline=False)
            embed.add_field(name="", value="-"*50, inline=False)

    embed.set_footer(text=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {datetime.now().strftime('%d/%m/%Y')}")
    return embed


# --- UI Components ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ---

# 1. ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á
class PlayerSelect(Select):
    def __init__(self, players: list):
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô dict ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ callback ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡πà‡∏≤‡∏¢
        self.players_data = {str(p['id']): p for p in players}
        options = [
            discord.SelectOption(
                label=p['name'], 
                value=str(p['id']), 
                description=f"‡∏ó‡∏µ‡∏°: {p.get('current_team', {}).get('name', 'N/A')}"
            ) for p in players[:25] # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏Ñ‡πà 25 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á Select)
        ]
        super().__init__(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...", options=options)

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        player_data = self.players_data[self.values[0]]
        
        if not player_data.get('current_team'):
            await interaction.followup.send(f"**{player_data['name']}** ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡∏°‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", ephemeral=True)
            return
            
        team_id = player_data['current_team']['id']
        matches = pandascore_api.fetch_team_upcoming_matches(team_id)
        response_embed = create_player_schedule_embed(player_data, matches)
        await interaction.edit_original_response(content=None, embed=response_embed, view=None)

class PlayerSelectView(View):
    def __init__(self, players: list, *, timeout=180):
        super().__init__(timeout=timeout)
        self.add_item(PlayerSelect(players))

# 2. ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°
class TeamSelect(Select):
    def __init__(self, teams: list):
        self.teams_data = {str(t['id']): t for t in teams}
        options = [
            discord.SelectOption(
                label=t['name'], 
                value=str(t['id']), 
                description=f"Acronym: {t.get('acronym', 'N/A')}"
            ) for t in teams[:25]
        ]
        super().__init__(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...", options=options)

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        team_data = self.teams_data[self.values[0]]
        
        matches = pandascore_api.fetch_team_upcoming_matches(team_data['id'])
        response_embed = create_team_schedule_embed(team_data, matches)
        await interaction.edit_original_response(content=None, embed=response_embed, view=None)

class TeamSelectView(View):
    def __init__(self, teams: list, *, timeout=180):
        super().__init__(timeout=timeout)
        self.add_item(TeamSelect(teams))


# --- UI Components ‡πÄ‡∏î‡∏¥‡∏° ---

# 1. Modals (Pop-ups)
class PlayerSearchModal(Modal):
    def __init__(self, game_slug: str):
        super().__init__(title=f"‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á‡πÉ‡∏ô {GAME_EMBED_CONFIG[game_slug]['name']}")
        self.game_slug = game_slug; self.add_item(InputText(label="‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á (In-game name)", placeholder="‡πÄ‡∏ä‡πà‡∏ô TenZ, f0rsakeN, s1mple", required=True))

    async def callback(self, interaction: discord.Interaction):
        player_name = self.children[0].value
        await interaction.response.defer(ephemeral=True)
        
        players_found = pandascore_api.search_players(self.game_slug, player_name)
        if not players_found:
            await interaction.followup.send(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠ '{player_name}'", ephemeral=True)
            return
        await interaction.followup.send("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", view=PlayerSelectView(players_found), ephemeral=True)


class TeamSearchModal(Modal):
    def __init__(self, game_slug: str):
        super().__init__(title=f"‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡∏°‡πÉ‡∏ô {GAME_EMBED_CONFIG[game_slug]['name']}")
        self.game_slug = game_slug; self.add_item(InputText(label="‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°", placeholder="‡πÄ‡∏ä‡πà‡∏ô Paper Rex, Fnatic, T1", required=True))

    async def callback(self, interaction: discord.Interaction):
        team_name = self.children[0].value
        await interaction.response.defer(ephemeral=True)
        
        teams_found = pandascore_api.search_teams(self.game_slug, team_name)
        if not teams_found:
            await interaction.followup.send(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡∏°‡∏ä‡∏∑‡πà‡∏≠ '{team_name}'", ephemeral=True)
            return   
        await interaction.followup.send("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", view=TeamSelectView(teams_found), ephemeral=True)


# 2. ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°
class GameSelect(Select):
    def __init__(self, action: str, time_period: str = None):
        self.action = action; self.time_period = time_period
        options = [discord.SelectOption(label=c["name"], value=s, emoji="üéÆ") for s, c in GAME_EMBED_CONFIG.items()]
        super().__init__(placeholder=f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°...", options=options)

    async def callback(self, interaction: discord.Interaction):
        game_slug = self.values[0]
        if self.action == "schedule":
            response_embed = create_schedule_embed(game_slug, self.time_period)
            await interaction.response.edit_message(content=None, embed=response_embed, view=None)
        elif self.action == "search_player":
            await interaction.response.send_modal(PlayerSearchModal(game_slug))
        elif self.action == "search_team":
            await interaction.response.send_modal(TeamSearchModal(game_slug))


class GameSelectView(View):
    def __init__(self, action: str, time_period: str = None, *, timeout=180):
        super().__init__(timeout=timeout); self.add_item(GameSelect(action, time_period))
class TimePeriodSelectView(View):
    def __init__(self, *, timeout=180): super().__init__(timeout=timeout)
    async def send_game_select(self, i, p): await i.response.edit_message(content="‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢", view=GameSelectView("schedule", p))
    @discord.ui.button(label="‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", style=discord.ButtonStyle.green, emoji="üìÖ")
    async def today(self, b, i): await self.send_game_select(i, "today")
    @discord.ui.button(label="‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ", style=discord.ButtonStyle.primary, emoji="‚û°Ô∏è")
    async def tomorrow(self, b, i): await self.send_game_select(i, "tomorrow")
    @discord.ui.button(label="‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ", style=discord.ButtonStyle.secondary, emoji="üóìÔ∏è")
    async def this_week(self, b, i): await self.send_game_select(i, "this_week")

# 3. View ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
class MainControlPanelView(View):
    def __init__(self): super().__init__(timeout=None)
    @discord.ui.button(label="‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏Ç‡πà‡∏á", style=discord.ButtonStyle.green, custom_id="persistent_view:schedule", emoji="üìÖ")
    async def schedule_button(self, b, i): await i.response.send_message(content="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", view=TimePeriodSelectView(), ephemeral=True)
    @discord.ui.button(label="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á", style=discord.ButtonStyle.primary, custom_id="persistent_view:search_player", emoji="üîç")
    async def search_player_button(self, b, i): await i.response.send_message(view=GameSelectView(action="search_player"), ephemeral=True)
    @discord.ui.button(label="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡∏°", style=discord.ButtonStyle.secondary, custom_id="persistent_view:search_team", emoji="üë•")
    async def search_team_button(self, b, i): await i.response.send_message(view=GameSelectView(action="search_team"), ephemeral=True)

# --- Event, Task, ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /setup ---
@bot.event
async def on_ready(): bot.add_view(MainControlPanelView()); print(f"‚úÖ ‡∏ö‡∏≠‡∏ó {bot.user} ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß!"); database.initialize_db(); update_matches_cache.start()
@tasks.loop(minutes=15)
async def update_matches_cache():
    print(f"[{datetime.now()}] üîÑ Starting background task...");
    for game_slug in GAMES_TO_TRACK:
        matches_data = pandascore_api.fetch_upcoming_matches(game_slug);
        if matches_data: database.upsert_matches(matches_data)
    print("‚úÖ Background task finished.")
@bot.slash_command(name="setup", description="[Admin] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ")
@commands.has_permissions(administrator=True)
async def setup_panel(ctx: discord.ApplicationContext):
    await ctx.respond("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...", ephemeral=True);
    embed = discord.Embed(
        title="Esports Schedule Bot",
        description=(
            "‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô Esports (Valorant, CS2, LoL, Dota2)\n\n"
            "**‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**\n"
            "üîπ **‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏Ç‡πà‡∏á:** ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° `‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏Ç‡πà‡∏á` ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏°\n"
            "üîπ **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á:** ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° `‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\n"
            "üîπ **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡∏°:** ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° `‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡∏°` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å\n\n"
        ), color=0x2ECC71);
    embed.set_footer(text="‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
    await ctx.channel.send(embed=embed, view=MainControlPanelView());
    await ctx.edit(content="‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

# --- ‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó ---
bot.run(config.DISCORD_BOT_TOKEN)